typedef struct {
  uint8_t offset;
  uint8_t color;
  uint8_t count;
} colorZip_t;

const uint8_t __attribute__((used)) batteryFull[] PROGMEM = {
0x7f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x1d, 0x80, 0x00, 
0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x01, 
0xf8, 0x00, 0x00, 0x00, 0x0e, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xfe
};

uint16_t colorPalette[50] = { 
  0x6B6D, 0xDEDB, 0x7E0, 0xD6DB, 0xFDA0, 
  0xF800, 0xDEDA, 0x120, 0x25A0, 0x2480, 
  0x2360, 0x6C0, 0x26C0, 0x100, 0x9000, 
  0x6800, 0x4000, 0xD800, 0xB000, 0xB800, 
  0x7000, 0x4800, 0x2220, 0xDFE0, 0xDEC0, 
  0x2240, 0xFFE0, 0xB5A0, 0x240, 0x4DA0, 
  0x27E0, 0x220, 0x2A0, 0xAD40, };
int colorIdx = 35;

const colorZip_t __attribute__((used)) batteryFullColors[] PROGMEM = { 
  {0x0, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x1F, 0x1, 0x0}, {0x0, 0x0, 0x0}, {0x2, 0x1, 0x0}, 
  {0x21, 0x1, 0x0}, {0x2, 0x1, 0x0}, {0x1, 0x2, 0x1E}, {0x3, 0x0, 0x0}, {0x0, 0x1, 0x0}, 
  {0x1, 0x2, 0x1E}, {0x3, 0x1, 0x1}, {0x1, 0x2, 0x1E}, {0x3, 0x1, 0x1}, {0x1, 0x2, 0x1E}, 
  {0x3, 0x1, 0x1}, {0x1, 0x2, 0x1E}, {0x3, 0x1, 0x1}, {0x1, 0x2, 0x1E}, {0x3, 0x0, 0x0}, 
  {0x0, 0x1, 0x0}, {0x21, 0x1, 0x0}, {0x2, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x1F, 0x1, 0x0}, 
  {0x0, 0x0, 0x0},
};

const colorZip_t __attribute__((used)) batteryMostColors[] PROGMEM = {
  {0x0, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x1F, 0x1, 0x0}, {0x0, 0x0, 0x0}, {0x2, 0x1, 0x0}, 
  {0x21, 0x1, 0x0}, {0x2, 0x1, 0x0}, {0x1, 0x2, 0x15}, {0xC, 0x0, 0x0}, {0x0, 0x1, 0x0}, 
  {0x1, 0x2, 0x15}, {0xC, 0x1, 0x1}, {0x1, 0x2, 0x15}, {0xC, 0x1, 0x1}, {0x1, 0x2, 0x15}, 
  {0xC, 0x1, 0x1}, {0x1, 0x2, 0x15}, {0xC, 0x1, 0x1}, {0x1, 0x2, 0x15}, {0xC, 0x0, 0x0}, 
  {0x0, 0x1, 0x0}, {0x21, 0x1, 0x0}, {0x2, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x1F, 0x1, 0x0}, 
  {0x0, 0x0, 0x0},
};

const colorZip_t __attribute__((used)) batteryThirdColors[] PROGMEM = {
  {0x0, 0x0, 0x0}, {0x0, 0x3, 0x0}, {0x1F, 0x1, 0x0}, {0x0, 0x0, 0x0}, {0x2, 0x3, 0x0}, 
  {0x21, 0x1, 0x0}, {0x2, 0x1, 0x0}, {0x1, 0x4, 0xA}, {0x17, 0x0, 0x0}, {0x0, 0x1, 0x0}, 
  {0x1, 0x4, 0xA}, {0x17, 0x1, 0x1}, {0x1, 0x4, 0xA}, {0x17, 0x1, 0x1}, {0x1, 0x4, 0xA}, 
  {0x17, 0x1, 0x1}, {0x1, 0x4, 0xA}, {0x17, 0x1, 0x1}, {0x1, 0x4, 0xA}, {0x17, 0x0, 0x0}, 
  {0x0, 0x1, 0x0}, {0x21, 0x1, 0x0}, {0x2, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x1F, 0x1, 0x0}, 
  {0x0, 0x0, 0x0},
};

const colorZip_t __attribute__((used)) batteryEmptyColors[] PROGMEM = {
  {0x0, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x1F, 0x1, 0x0}, {0x0, 0x0, 0x0}, {0x2, 0x1, 0x0}, 
  {0x21, 0x1, 0x0}, {0x2, 0x1, 0x0}, {0x1, 0x5, 0x4}, {0x1D, 0x0, 0x0}, {0x0, 0x1, 0x0}, 
  {0x1, 0x5, 0x4}, {0x1D, 0x1, 0x1}, {0x1, 0x5, 0x4}, {0x1D, 0x1, 0x0}, {0x0, 0x6, 0x0}, 
  {0x1, 0x5, 0x4}, {0x1D, 0x1, 0x1}, {0x1, 0x5, 0x4}, {0x1D, 0x1, 0x1}, {0x1, 0x5, 0x4}, 
  {0x1D, 0x0, 0x0}, {0x0, 0x1, 0x0}, {0x21, 0x1, 0x0}, {0x2, 0x0, 0x0}, {0x0, 0x1, 0x0}, 
  {0x1F, 0x1, 0x0}, {0x0, 0x0, 0x0},
};

const uint8_t __attribute__((used)) menuArrowRight[] PROGMEM = {
  0x10, 0x00, 0x38, 0x00, 0x7c, 0x00, 0xfe, 0x00, 0x7f, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x0f, 0xe0, 
  0x07, 0xf0, 0x03, 0xf8, 0x01, 0xfc, 0x00, 0xfe, 0x00, 0x7f, 0x00, 0xfe, 0x01, 0xfc, 0x03, 0xf8, 
  0x07, 0xf0, 0x0f, 0xe0, 0x1f, 0xc0, 0x3f, 0x80, 0x7f, 0x00, 0xfe, 0x00, 0xfc, 0x00, 0x38, 0x00, 
  0x30, 0x00,
};

const uint8_t __attribute__((used)) menuArrowLeft[] PROGMEM = {
  0x00, 0x0c, 0x00, 0x1e, 0x00, 0x3f, 0x00, 0x7f, 0x00, 0xfe, 0x01, 0xfc, 0x03, 0xf8, 0x07, 0xf0, 
  0x0f, 0xe0, 0x1f, 0xc0, 0x3f, 0x80, 0x7f, 0x00, 0xfe, 0x00, 0x7f, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 
  0x0f, 0xe0, 0x07, 0xf0, 0x03, 0xf8, 0x01, 0xfc, 0x00, 0xfe, 0x00, 0x7f, 0x00, 0x3f, 0x00, 0x1e, 
  0x00, 0x0c
};

const colorZip_t __attribute__((used)) menuArrowYellowLeft[] PROGMEM = {
  {0xB, 0x16, 0x0}, {0x0, 0x17, 0x0}, {0x0, 0x18, 0x0}, {0x0, 0x19, 0x0}, {0xB, 0x16, 0x0}, 
  {0x0, 0x17, 0x0}, {0x0, 0x1A, 0x1}, {0x0, 0x1B, 0x0}, {0x0, 0x19, 0x0}, {0x9, 0x19, 0x0}, 
  {0x0, 0x17, 0x0}, {0x0, 0x1A, 0x3}, {0x0, 0x18, 0x0}, {0x8, 0x19, 0x0}, {0x0, 0x17, 0x0}, 
  {0x0, 0x1A, 0x5}, {0x7, 0x19, 0x0}, {0x0, 0x17, 0x0}, {0x0, 0x1A, 0x5}, {0x0, 0x19, 0x0}, 
  {0x6, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x16, 0x0}, {0x6, 0x19, 0x0}, {0x0, 0x17, 0x0}, 
  {0x0, 0x1A, 0x5}, {0x0, 0x19, 0x0}, {0x6, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, 
  {0x6, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, {0x6, 0x19, 0x0}, {0x0, 0x1A, 0x6}, 
  {0x0, 0x19, 0x0}, {0x6, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, {0x6, 0x19, 0x0}, 
  {0x0, 0x1A, 0x6}, {0x0, 0x16, 0x0}, {0x7, 0x17, 0x0}, {0x0, 0x1A, 0x5}, {0x0, 0x16, 0x0}, 
  {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, 
  {0x0, 0x19, 0x0}, {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x16, 0x0}, {0x8, 0x19, 0x0}, 
  {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, 
  {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, 
  {0x0, 0x16, 0x0}, {0x8, 0x19, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x19, 0x0}, {0x8, 0x16, 0x0}, 
  {0x0, 0x1A, 0x6}, {0x9, 0x16, 0x0}, {0x0, 0x1A, 0x4}, {0x0, 0x18, 0x0}, {0xA, 0x19, 0x0}, 
  {0x0, 0x1A, 0x2}, {0x0, 0x1B, 0x0}, {0x0, 0x19, 0x0}, {0xB, 0x19, 0x0}, {0x0, 0x1A, 0x0}, 
  {0x0, 0x1B, 0x0}, {0x0, 0x19, 0x0},
};

const colorZip_t __attribute__((used)) menuArrowRedLeft[] PROGMEM = {
  {0xC, 0xE, 0x0}, {0x0, 0xF, 0x0}, {0xD, 0xE, 0x0}, {0x0, 0x5, 0x1}, {0x0, 0x10, 0x0}, 
  {0xB, 0xE, 0x0}, {0x0, 0x5, 0x3}, {0x0, 0xF, 0x0}, {0x9, 0xE, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x11, 0x0}, {0x8, 0xE, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x11, 0x0}, {0x8, 0x12, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0x11, 0x0}, {0x8, 0xE, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x11, 0x0}, 
  {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x11, 0x0}, {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x12, 0x0}, {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x11, 0x0}, {0x8, 0x12, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, 
  {0x8, 0xE, 0x0}, {0x0, 0x5, 0x5}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, 
  {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, 
  {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x13, 0x0}, {0xA, 0x13, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x12, 0x0}, {0xA, 0x13, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, 
  {0x0, 0x5, 0x3}, {0x0, 0x14, 0x0}, {0xB, 0x12, 0x0}, {0x0, 0x5, 0x1}, {0x0, 0x15, 0x0}, 
  {0xD, 0x12, 0x0}, {0x0, 0x15, 0x0}
};

const colorZip_t __attribute__((used)) menuArrowGreenLeft[] PROGMEM = {
  {0xB, 0x7, 0x0}, {0x0, 0x8, 0x0}, {0x0, 0x9, 0x0}, {0x0, 0x7, 0x0}, {0xC, 0x8, 0x0}, 
  {0x0, 0x2, 0x1}, {0x0, 0xA, 0x0}, {0x0, 0x7, 0x0}, {0xA, 0x8, 0x0}, {0x0, 0x2, 0x3}, 
  {0x0, 0x9, 0x0}, {0x8, 0x7, 0x0}, {0x0, 0x8, 0x0}, {0x0, 0x2, 0x5}, {0x7, 0x7, 0x0}, 
  {0x0, 0x8, 0x0}, {0x0, 0x2, 0x5}, {0x0, 0x7, 0x0}, {0x6, 0x7, 0x0}, {0x0, 0xB, 0x0}, 
  {0x0, 0x2, 0x5}, {0x0, 0x7, 0x0}, {0x6, 0x7, 0x0}, {0x0, 0x8, 0x0}, {0x0, 0x2, 0x5}, 
  {0x0, 0x7, 0x0}, {0x6, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x5}, {0x0, 0x7, 0x0}, 
  {0x7, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, {0x7, 0x7, 0x0}, {0x0, 0xB, 0x0}, 
  {0x0, 0x2, 0x5}, {0x0, 0x7, 0x0}, {0x7, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, 
  {0x0, 0x7, 0x0}, {0x7, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xC, 0x0}, {0x8, 0x8, 0x0}, 
  {0x0, 0x2, 0x5}, {0x0, 0xD, 0x0}, {0x8, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, 
  {0x0, 0xB, 0x0}, {0x0, 0x7, 0x0}, {0x9, 0xC, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, 
  {0x0, 0x7, 0x0}, {0x8, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, 
  {0x0, 0xD, 0x0}, {0x8, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, 
  {0x0, 0xD, 0x0}, {0x8, 0xD, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, 
  {0x0, 0x7, 0x0}, {0x9, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, {0x0, 0xD, 0x0}, 
  {0x8, 0xD, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, {0x0, 0xD, 0x0}, 
  {0x8, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, {0x9, 0x7, 0x0}, 
  {0x0, 0xB, 0x0}, {0x0, 0x2, 0x4}, {0x0, 0xB, 0x0}, {0xA, 0xB, 0x0}, {0x0, 0x2, 0x3}, 
  {0x0, 0x9, 0x0}, {0xA, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0x2, 0x1}, {0x0, 0xA, 0x0}, 
  {0x0, 0x7, 0x0}, {0xB, 0x7, 0x0}, {0x0, 0xB, 0x0}, {0x0, 0xA, 0x0}, {0x0, 0x7, 0x0}, 
};

const colorZip_t __attribute__((used)) menuArrowGreenRight[] PROGMEM = {
  {0x1, 0x1C, 0x0}, {0x0, 0x1D, 0x0}, {0x0, 0x1E, 0x0}, {0x0, 0x1C, 0x0}, {0xB, 0x1C, 0x0}, 
  {0x0, 0x1D, 0x0}, {0x0, 0x2, 0x2}, {0x0, 0x1F, 0x0}, {0xA, 0xC, 0x0}, {0x0, 0x2, 0x4}, 
  {0x0, 0x1C, 0x0}, {0x9, 0x2, 0x6}, {0x0, 0x1C, 0x0}, {0x9, 0x2, 0x6}, {0x0, 0x1F, 0x0}, 
  {0x8, 0x1C, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1F, 0x0}, {0x8, 0x1C, 0x0}, {0x0, 0x2, 0x6}, 
  {0x0, 0x1F, 0x0}, {0x8, 0x1C, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1F, 0x0}, {0x8, 0x1C, 0x0}, 
  {0x0, 0x2, 0x6}, {0x0, 0x1C, 0x0}, {0x8, 0x1F, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1C, 0x0}, 
  {0x8, 0x1C, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1F, 0x0}, {0x9, 0x2, 0x6}, {0x0, 0x9, 0x0}, 
  {0x8, 0x1C, 0x0}, {0x0, 0x2, 0x5}, {0x0, 0x1E, 0x0}, {0x7, 0x1C, 0x0}, {0x0, 0x2, 0x6}, 
  {0x0, 0x1C, 0x0}, {0x6, 0x1C, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1C, 0x0}, {0x6, 0x1C, 0x0}, 
  {0x0, 0x2, 0x6}, {0x0, 0x1C, 0x0}, {0x6, 0x1C, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1C, 0x0}, 
  {0x6, 0x1C, 0x0}, {0x0, 0x2, 0x6}, {0x0, 0x1C, 0x0}, {0x6, 0x1C, 0x0}, {0x0, 0x2, 0x5}, 
  {0x0, 0x1E, 0x0}, {0x0, 0x1C, 0x0}, {0x6, 0x1C, 0x0}, {0x0, 0x2, 0x5}, {0x0, 0x1E, 0x0}, 
  {0x0, 0x1C, 0x0}, {0x6, 0x1C, 0x0}, {0x0, 0x2, 0x5}, {0x0, 0x1E, 0x0}, {0x0, 0x1C, 0x0}, 
  {0x7, 0x2, 0x5}, {0x0, 0x1E, 0x0}, {0x0, 0x1F, 0x0}, {0x8, 0xC, 0x0}, {0x0, 0x2, 0x3}, 
  {0x0, 0x1E, 0x0}, {0x0, 0x1C, 0x0}, {0x9, 0x1C, 0x0}, {0x0, 0x1D, 0x0}, {0x0, 0x2, 0x1}, 
  {0x0, 0x1E, 0x0}, {0x0, 0x1F, 0x0}, {0xB, 0x1C, 0x0}, {0x0, 0xC, 0x0}, {0x0, 0x1E, 0x0}, 
  {0x0, 0x1C, 0x0},
};

const colorZip_t __attribute__((used)) menuArrowRedRight[] PROGMEM = {
  {0x2, 0x10, 0x0}, {0x0, 0xE, 0x0}, {0xD, 0x15, 0x0}, {0x0, 0x5, 0x1}, {0x0, 0x12, 0x0}, 
  {0xB, 0xF, 0x0}, {0x0, 0x5, 0x3}, {0x0, 0x13, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x12, 0x0}, {0xA, 0x11, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x13, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, 
  {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0xA, 0x12, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0x13, 0x0}, {0xA, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, 
  {0x0, 0x20, 0x0}, {0x9, 0x5, 0x5}, {0x0, 0xE, 0x0}, {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0x12, 0x0}, {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0x8, 0x11, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0x8, 0x12, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, 
  {0x8, 0x11, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0x12, 0x0}, {0x8, 0x11, 0x0}, {0x0, 0x5, 0x4}, 
  {0x0, 0xE, 0x0}, {0x8, 0x11, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0xE, 0x0}, {0x8, 0x11, 0x0}, 
  {0x0, 0x5, 0x4}, {0x0, 0xE, 0x0}, {0x8, 0x11, 0x0}, {0x0, 0x5, 0x4}, {0x0, 0xE, 0x0}, 
  {0x9, 0xF, 0x0}, {0x0, 0x5, 0x3}, {0x0, 0xE, 0x0}, {0xB, 0x10, 0x0}, {0x0, 0x5, 0x1}, 
  {0x0, 0xE, 0x0}, {0xD, 0xF, 0x0}, {0x0, 0xE, 0x0},
};

const colorZip_t __attribute__((used)) menuArrowYellowRight[] PROGMEM = {
{0x1, 0x20, 0x0}, {0x0, 0x21, 0x0}, {0x0, 0x1A, 0x0}, {0x0, 0x20, 0x0}, {0xB, 0x20, 0x0}, 
{0x0, 0x21, 0x0}, {0x0, 0x1A, 0x2}, {0x0, 0x20, 0x0}, {0xA, 0x1A, 0x5}, {0x0, 0x20, 0x0}, 
{0x9, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, 
{0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, 
{0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, 
{0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, 
{0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, 
{0x0, 0x20, 0x0}, {0x8, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x7, 0x20, 0x0}, {0x0, 0x1A, 0x6}, 
{0x0, 0x20, 0x0}, {0x6, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x6, 0x20, 0x0}, 
{0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x6, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, 
{0x6, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x6, 0x20, 0x0}, {0x0, 0x1A, 0x6}, 
{0x0, 0x20, 0x0}, {0x6, 0x20, 0x0}, {0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x6, 0x20, 0x0}, 
{0x0, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x7, 0x1A, 0x6}, {0x0, 0x20, 0x0}, {0x8, 0x1A, 0x5}, 
{0x0, 0x20, 0x0}, {0x9, 0x20, 0x0}, {0x0, 0x21, 0x0}, {0x0, 0x1A, 0x2}, {0x0, 0x20, 0x0}, 
{0xB, 0x20, 0x0}, {0x0, 0x1A, 0x1}, {0x0, 0x20, 0x0},
};



//  uint16_t colorPixels = 0;
//  uint8_t offset = 0;
//  uint16_t bo;
//  int foundColor;
//  int printIterator = 0;
//
//  currentColor.color = 0;
//  currentColor.count = 0;
//  bool startedColor = 0;
//  for (uint16_t i = 0; i < IMAGE_SIZE; i++) {
//    bo = pgm_read_word(&ARROW2_yellow_8c[i]);
////    Serial.print("Color ");
////    Serial.print(i);
////    Serial.print(" is ");
////    Serial.println((uint16_t) bo, HEX);
//    if (((uint16_t) bo == 65535) || ((uint16_t) bo == (uint16_t) 0)) {
//      if (startedColor) {
//        startedColor = 0;
//        printIterator++;
//        Serial.print("{0x");
//        Serial.print(offset, HEX);
//        Serial.print(", 0x");
//        Serial.print(currentColor.color, HEX);
//        Serial.print(", 0x");
//        Serial.print(currentColor.count, HEX);
//        if (printIterator == 5) {
//          Serial.println("}, ");
//          printIterator = 0;
//        } else {
//          Serial.print("}, ");
//        }
//        offset = 0;
//      }
//      offset++;
//      continue;
//    }
//    
//    if (((uint16_t) bo != 65535) && ((uint16_t) bo != (uint16_t) 0)) {
//      // Color compression algorhytm
//      foundColor = -1;
//      for (int c = 0; c < colorIdx; c++) {
//        if (colorPalette[c] == (uint16_t) bo) {
////          Serial.print("Color found, index: ");
////          Serial.println(c);
//          foundColor = c;
//        }
//      }
//      if (foundColor == -1) {
////        Serial.println("Color not found, adding to palette");
//        foundColor = colorIdx;
//        colorPalette[colorIdx++] = (uint16_t) bo;
//      }
//
//      if (!startedColor) {
//        currentColor.color = foundColor;
//        currentColor.count = 0;
//        startedColor = 1;
//      } else {
//        if (colorPalette[currentColor.color] == (uint16_t) bo) {
//          currentColor.count++;
//          // Continue to the next pixel
//          continue;
//        }
//        if ((colorPalette[currentColor.color] != (uint16_t) bo) || (i == (IMAGE_SIZE - 1))) {
//          colorPixels++;
//          printIterator++;
//          Serial.print("{0x");
//          Serial.print(offset, HEX);
//          Serial.print(", 0x");
//          Serial.print(currentColor.color, HEX);
//          Serial.print(", 0x");
//          Serial.print(currentColor.count, HEX);
//          if (printIterator == 5) {
//            Serial.println("}, ");
//            printIterator = 0;
//          } else {
//            Serial.print("}, ");
//          }
//          currentColor.color = foundColor;
//          currentColor.count = 0;
//          offset = 0;
//        }
//      }
//        // Some debugging
////      Serial.print("color at ");
////      Serial.print(i);
////      Serial.print(" is ");
////      Serial.println((uint16_t) bo);
////        // Print offsets and colors
////      Serial.print("{");
////      Serial.print(offset, HEX);
////      Serial.print(", ");
////      Serial.print((uint16_t) bo, HEX);
////      // Print offsets seperately
////      Serial.print(offset);
////        // Print colors seperately
////        Serial.print((uint16_t) bo);
////      if (colorPixels % 6 == 0) {
////        Serial.println("}, ");
////      } else {
////        Serial.print("}, ");
////      }
//    }
//  }
//  Serial.print("Total records: ");
//  Serial.println(colorPixels);
//  Serial.print("Color palette: ");
//  Serial.print("{ ");
//  for (int i = 0; i < 50; i++) {
//    if (colorPalette[i] == 0) {
//      break;
//    }
//    Serial.print("0x");
//    Serial.print(colorPalette[i], HEX);
//    Serial.print(", ");
//  }
//  Serial.print("}; ");









// Draw a 1-bit image (bitmap) at the specified (x,y) position from the
// provided bitmap buffer (must be PROGMEM memory) using the specified
// foreground color (unset bits are transparent).
// Normunds modifications
// Drawing compressed image using offset, color, repeat count and color palette array.
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
 const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, const colorZip_t *colorZip, const uint16_t *palette) {

  uint16_t dataIndex = 0;
  uint8_t selectedColor = pgm_read_byte(&colorZip[dataIndex].color);
  uint8_t offset = pgm_read_byte(&colorZip[dataIndex].offset);
  int16_t count = pgm_read_byte(&colorZip[dataIndex].count);
  
  int8_t i, j;
  uint8_t byte = pgm_read_byte(bitmap);
  ((char*&)bitmap)++;
  uint8_t iterator = 0;

  for(j=0; j<h - 1; j++) {
    for(i=0; i<w; i++) {
/*       if(i & 7) {
		  byte <<= 1;
	  } else {
		  byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
	  }
      if(byte & 0x80) drawPixel(x+i, y+j, color); */
	  iterator++;
      if(byte & 0x80) {
		  drawPixel(x+i, y+j, color);
	  }
	  byte <<= 1;
	  
		if (offset == 0 && count >= 0) {
			drawPixel(x+i,y+j,palette[selectedColor]);
/* 			Serial.print("Drawing color pixel@ x: ");
			Serial.print(i);
			Serial.print(" y: ");
			Serial.print(j);
			Serial.print(" color Idx: ");
			Serial.println(selectedColor);
			Serial.print("count: ");
			Serial.print(count);
			Serial.print(" offset: ");
			Serial.println(offset); */
			count--;
			if (count < 0) {
				dataIndex++;
				selectedColor = pgm_read_byte(&colorZip[dataIndex].color);
				offset = pgm_read_byte(&colorZip[dataIndex].offset);
				count = pgm_read_byte(&colorZip[dataIndex].count);
			}
		} else {
			offset--;
		}
	  
	  if (iterator == 8) {
 		byte = pgm_read_byte(bitmap);
/*		Serial.print("coords x: ");
		Serial.print(i);
		Serial.print(" y: ");
		Serial.print(j);
		Serial.print(" Byte is ");
		Serial.println(byte, HEX); */
		iterator = 0;
		((char*&)bitmap)++;
	  }
    }
  }
}